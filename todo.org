#+title: Todo

* Next
- [-] offline shader compilation for reflection info
  - [-] use cli's json reflection data
    - [X] generate reflection json and offline spv
    - [ ] deserialize json reflection data
    - [ ] generate rust files based on reflection data
  - [ ] in dev, do both offline (for type checking) and hot reload
    - see if it's possible for the cli to do only reflection json
  - [ ] someday, use hash of input text in output dir for dependency tracking
    or use a fancy build system with its own dependency tracking; cmake? ninja?
  - [ ] multiple entry points with SDL_gpu?
    - with cli, this compiles to a single spirv file
      this is incompatible with SDL_gpu (because of vulkan/spirv 1.0 requirement)
      - solution: use slang-rs or a cli prepass w/reflection json to get entry points
        then iterate through those entry points with cli invocations,
        providing entrypoint and generating 1.0 spirv via glsl
    - this might be a reason to stick to plain vulkan?
  - [ ] generate Vertex & other structs via slang reflection
    - triangle example first

- [ ] signed distance fields
   https://danielchasehooper.com/posts/code-animated-rick/

- [ ] read about dynamic rendering
  - [ ] sascha's 1.3 triangle
  - [ ] vkguide?

- [ ] go through 'learn opengl' with this renderer

- [ ] rewrite renderer in a new repo
  - use a cargo workspace
    make it easy to keep multiple working examples
  - group one-time initialized fields into a sub-struct w/methods
  - group sync primitive arrays with their resources in some way
    ie make it clear what's per-swapchain-image vs per-in-flight-frame
  - use anyhow for errors
  - use an env var for vulkan validation layer
    https://github.com/ash-rs/ash/issues/190#issuecomment-758269723
    maybe for logging too? ie always compile w/verbose
  - also switch to dynamic rendering?
    in the future, try out bindless with slang support
  - maybe pregenerate mipmaps offline instead of doing it in vulkan at runtime
    can image-rs do this? need to pack them as well
    see if theres an stb tool or something

* Future
- [ ] make a spinning cube from scratch in slang

- [ ] set up switching between intel & nvidia graphics w/POP_OS?
  - [ ] figure out why it started using intel graphics
  - [ ] make sure the code is choosing a dedicated graphics card if it's availble

- [ ] vulkan-tutorial extras
  - [ ] compute shader

- [ ] look at Sascha Willems' other examples
- [ ] move on to https://vkguide.dev/ ?
  - use egui w/ash crate

- [ ] consider adding a separate queue & command buffer for memory transfer
  https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/02_Staging_buffer.html#_transfer_queue

- [ ] learn how to use a gpu memory allocator
  particularly the two crates the ash egui crate integrates with
- [ ] start recreating bevy 2d platformer with this tech stack?

- [ ] find out if hot-reloading pipeline code is possible
  ie, use lifecycle methods from

- [ ] understand stage & access masks better
  - [ ] review usage in ImageMemoryBarrier & in SubpassDependency
  re: creating framebuffers using the same depth image:
  "The color attachment differs for every swap chain image, but the same depth image can be used by all of them because only a single subpass is running at the same time due to our semaphores."
  so we'd need to do a depth image per swapchain image if there were multiple subpasses using them?
  how does SDL3_gpu handle that?
- [ ] review how barriers are used in the mipmap chapter

- [ ] try out using draw indirect & gpu culling

- [ ] generate build-time mipmaps
  - [ ] generate & use separate half-sized files with image-rs
  - [ ] combine & use into one packed sheet

- [ ] regenerate reflection structs during hot reload

- [ ] see if it's possible to use slang-rs compiler options CapabilityID
  instead of cli-style profile '+spirv_1_5'

- [ ] better printf and validation layers setup
  control the validation layers with env vars
  use the env vars described here:
  https://www.lunarg.com/wp-content/uploads/2021/08/Using-Debug-Printf-02August2021.pdf
