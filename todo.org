#+title: Todo

* Current
- [ ] do the official vulkan compute shader tutorial
  make it one of the examples here

- [ ] need a plan for more dynamically created descriptor sets
  ie the todo in create_descriptor_sets
  - [ ] take an enum/struct arg that specifies each descriptor fully
    - DescriptorBuffer
    - DescriptorImageInfo

- [ ] get vertex attribute & binding descriptions via reflection

- [ ] make the shader atlas entry type carry more generics
  - [ ] vertex type
    associated type on a Shader trait?
  - [ ] required resources (ie one texture)
    what's a nice way to handle this? use the same struct as create_descriptor_sets?

- [-] change renderer to allow dynamic graphics resources
  - [-] move game methods to renderer constructor args
    ie, passed in from Game struct/module
    - [X] compiled shaders
      pre-compiled owned by game; ultimately passed to create pipeline
    - [-] uniform buffer
      renderer should have a vec of vecs for these
      basically an allocator
        how is dealloc handled? tied to a 'scene'?
        just leak for now
    - [X] load texture
      game loads asset; calls renderer to allocate vk::Image & vk::DeviceMemory
    - [X] create pipeline
      also make an allocator for these? when do you have multiple pipelines?
      maybe just one for now?
      how is the pipeline handle used?
  - [X] split constructor args out into separate method calls

- [-] generate rust modules from reflection
  - [ ] generate structs (template not macro) from reflection json
    - put generated code in the shader atlas entry?
      or generate the shader atlas entry too
      - replacement macro for what we have now
    - [ ] snapshot tests
      - repr(C, align(16))
    - [ ] generate tests that sizes & offsets match

  - [-] assert that slang struct fields are in descending size order
    - [X] get parameter block buffer size
    - [ ] unit test this from the level of shader source code

  - [ ] switch to a macro from string template
    look at different options for this
    - is a plain replacement macro possible?
    - libraries for proc macros

  - [ ] how would this all work with bindless / buffer device addresses?


- [-] move example-specific code out of the renderer
  ie, make the renderer more generic across examples
  - [X] uniform buffer handling
  - [X] vertex/index buffer handling
    ie loading assets
  - [X] asset (really verticies/indicies) loading
  - [ ] dynamic resources (ie, unknown number of uniform buffers)
    avoid needing unsafe write to uniform buffer outside renderer

    renderer provides functions for creating graphics resources
    game fills itself in during init
    - [ ] first use void pointers to mapped memory
    - [ ] then switch to handles or wrapped typed pointers
      - [ ] for vertex buffers
      - [ ] also for uniform buffer contents

- [ ] generate vertex attributes?
  - discord links
    https://discord.com/channels/1303735196696445038/1387610899787022438/1387610899787022438
    https://discord.com/channels/1303735196696445038/1419640000609386496/1420377508683186258
    https://discord.com/channels/1303735196696445038/1305995870046650368/1410741801467510867
  - playground user attributes example
    - https://github.com/shader-slang/slang-playground/blob/1b97fa8bdf2a6cb2b18ca2d8e8d5e4b54b6eba51/public/demos/image-from-url.slang
    - https://github.com/shader-slang/slang-playground/blob/main/engine/slang-compilation-engine/src/slang/playground.slang
    - this has examples of Var and Function attribute targets; what about fields?
      https://github.com/shader-slang/slang/blob/2491ac5f42d78d082d4afa6416906fad9b32ea80/source/slang/slang-syntax.h#L379
      there's also struct and param, but not field

  - [ ] look at slangc reflection json implementation
    https://github.com/shader-slang/slang/blob/master/source/slang/slang-reflection-json.cpp
    https://github.com/shader-slang/slang/blob/master/source/slang/slang-reflection-json.cpp#L1100
    - bindings
      this isn't defined by the shader,
        but by the index in the buffer passed in the vk bind command
      it should be part of the graphics pipeline/resource creation,
        when game calls into renderer to set up a scene/pipeline
        then how do we handle the method on the Vertex type?
          for now it can always use 0
          but later, it'll have to be a separate 'BoundVertex' wrapper or something
    - offsets/locations
      entryPoints[arg_i]['type']['fields'][field_i]['binding']['index']
    - formats from slang user attributes
      unnecessary for now; hardcode glam vecs/matrices and primitives
    - [ ] can these be more directly generated from the type?
      field order in slang could be an issue
      generator could just validate the order?
      formats can be though; have standard map of formats for glam
        and then use struct user annotations for special/odd encoding

  - [ ] get rid of load_vertices
    keep Vertex type out of Game callback signatures

* Next
- [ ] add input/gobal type info to reflection data & shader atlas

- [ ] have the 'framework' do more before calling Game::setup
  ie, make an empty renderer, pass in other runtime config (cli flags/env vars)
  precompiled stuff? no reason to pass it as an argument

- [ ] handle shaders with different entry points in reflection
  ie, only compute, only fragment, etc

- [ ] generate the shader atlas?
  it's worth delaying this until the handwritten one is more complete
    ie, until it's pluggable into the renderer,
    and the renderer has no hardcoded pieces left

- [ ] signed distance fields / animated rick
  [[https://danielchasehooper.com/posts/code-animated-rick]]

- [ ] add feature flags
  - [ ] build-from-source-static for sdl3 on windows
  - [ ] shader hot reload for notify & shader_slang
    - [ ] figure out if slang precompile needs to be a workspace crate or something
- [ ] use a config module or cli params for stuff like COLUMN_MAJOR

- [ ] handle nested ParameterBlocks
  - [ ] should add_descriptor_range also skip ParameterBlock like PushConstant?
    if we don't, it changes the binding numbers assigned to the double-wrapped items,
    which seems wrong
    but that actually happens if we early return there as well? is something else wrong?
    also, does slang even support nested ParameterBlocks right now
- [ ] open PR to update slang docs
  - [ ] basic typo fixes
  - [ ] ask in discord about skipping nested ParameterBlocks

- [ ] slang reflection codegen
  - [ ] does create_descriptor_sets overwrite what we want to reflect?
    ie, with update_descriptor_sets in the loop
    - still need the texture sampler & image view somehow
      could get these fields from slang user attributes?
    - need to hold on to reflected data in shader module, merge with updates?
    - other resource-related things (ie, the image)
      will have to be handled by generated rust methods
  - [ ] generate Rust structs for shader globals/entrypoint args from field info?
    just use align 16 for now
    later, use const assertions like thread in slang discord
  - [ ] generate shader cursor interface?
    https://docs.shader-slang.org/en/latest/shader-cursors.html
    this is a lot
  - [ ] handle regenerated binding code in dev mode somehow
    - just panic for now
    - later, move compilation to a background thread
      send a message to rebuild the pipeline
      need some way to ensure hot reload of the rust happens first
      use hash of input shader source in output dir for dependency tracking?

- [ ] viking room colors are darker on windows?
  it looks like a gamma correction problem,
    but it is correctly using SRGB, as far as I can tell
    and I don't know why that would be platform-specific
    but it does get 'fixed' by doing a sqrt() on the sampled color


* Future
- [ ] read about dynamic rendering
  - [ ] sascha's 1.3 triangle
  - [ ] vkguide?

- [ ] go through 'learn opengl' with this renderer

- [ ] rewrite renderer in a new repo
  how much of this could be done gradually in this one?
  - use a cargo workspace
    make it easy to keep multiple working examples
  - group one-time initialized fields into a sub-struct w/methods
  - group sync primitive arrays with their resources in some way
    ie make it clear what's per-swapchain-image vs per-in-flight-frame
  - use an env var for vulkan validation layer
    https://github.com/ash-rs/ash/issues/190#issuecomment-758269723
    maybe for logging too? ie always compile w/verbose
  - also switch to dynamic rendering?
    in the future, try out bindless with slang support
  - maybe pregenerate mipmaps offline instead of doing it in vulkan at runtime
    can image-rs do this? need to pack them as well
    see if theres an stb tool or something

- [ ] make a spinning cube from scratch in slang

- [ ] set up switching between intel & nvidia graphics w/POP_OS?
  - [ ] figure out why it started using intel graphics
  - [ ] make sure the code is choosing a dedicated graphics card if it's availble

- [ ] vulkan-tutorial extras
  - [ ] compute shader

- [ ] look at Sascha Willems' other examples
- [ ] move on to https://vkguide.dev/ ?
  - use egui w/ash crate

- [ ] consider adding a separate queue & command buffer for memory transfer
  https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/02_Staging_buffer.html#_transfer_queue

- [ ] learn how to use a gpu memory allocator
  particularly the two crates the ash egui crate integrates with
- [ ] start recreating bevy 2d platformer with this tech stack?

- [ ] find out if hot-reloading pipeline code is possible
  ie, use lifecycle methods from

- [ ] understand stage & access masks better
  - [ ] review usage in ImageMemoryBarrier & in SubpassDependency
  re: creating framebuffers using the same depth image:
  "The color attachment differs for every swap chain image, but the same depth image can be used by all of them because only a single subpass is running at the same time due to our semaphores."
  so we'd need to do a depth image per swapchain image if there were multiple subpasses using them?
  how does SDL3_gpu handle that?
- [ ] review how barriers are used in the mipmap chapter

- [ ] try out using draw indirect & gpu culling

- [ ] generate build-time mipmaps
  - [ ] generate & use separate half-sized files with image-rs
  - [ ] combine & use into one packed sheet

- [ ] regenerate reflection structs during hot reload

- [ ] see if it's possible to use slang-rs compiler options CapabilityID
  instead of cli-style profile '+spirv_1_5'

- [ ] better printf and validation layers setup
  control the validation layers with env vars
  use the env vars described here:
  https://www.lunarg.com/wp-content/uploads/2021/08/Using-Debug-Printf-02August2021.pdf

- [ ] pre-compute the reflection-based vk pipeline layout
  ie, avoid doing shader reflection at startup in a release build
  does the shader-slang crate's serde support solve this?

- [ ] try to avoid the vk::ShaderStageFlags::ALL in add_global_scope_parameters
  - is there a way to use reflection to get at the true usage?
    #+begin_quote
    Applications that want to set more precise stage flags, taking into account which data is accessed by which stages in the compiled program binary, are encouraged to look at the more comprehensive documentation on the reflection API.
    #+end_quote
    https://docs.shader-slang.org/en/latest/parameter-blocks.html#global-scope
    there is reference to this in the slangc json code;
      there are steps after/if codegen was done

- [ ] handle unbounded count in bindings (bitwise not 0)
  see SLANG_UNBOUNDED_SIZE
  https://github.com/shader-slang/slang/blob/04093bcbaea9784cdffe55f3931f50db7ad9f808/source/slang/slang-reflection-json.cpp#L124
  https://github.com/shader-slang/slang/blob/04093bcbaea9784cdffe55f3931f50db7ad9f808/include/slang.h#L2167
