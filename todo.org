#+title: Todo

* Next
- [-] finish official vulkan tutorial
  https://docs.vulkan.org/tutorial/latest
  - [X] drawing a triangle
  - [X] vertex buffers
  - [X] uniform buffers
  - [X] texture mapping
  - [X] depth buffering
  - [ ] loading models
  - [ ] generating mipmaps
  - [ ] multisampling
  - [ ] compute shader

* Cleanup
- [X] avoid option unwraps after setup
- [ ] replace ENABLE_VALIDATION with an env var
  https://github.com/ash-rs/ash/issues/190#issuecomment-758269723

* Future
- [ ] add translated slang shaders
- [ ] make a spinning cube

- [ ] add shader hot reload
- [ ] try generating Vertex struct

- [ ] 1.3 dynamic rendering triangle
  - [ ] look at Sascha Willems' 1.3 triangle example
    https://github.com/SaschaWillems/Vulkan
  - [ ] read this other post
    https://lesleylai.info/en/vk-khr-dynamic-rendering/
- [ ] look at Sascha Willems' other examples
- [ ] move on to https://vkguide.dev/ ?
- [ ] consider adding a separate queue & command buffer for memory transfer
  https://docs.vulkan.org/tutorial/latest/04_Vertex_buffers/02_Staging_buffer.html#_transfer_queue
- [ ] learn how to use a gpu memory allocator
  particularly the two crates the ash egui crate integrates with
- [ ] start recreating bevy 2d platformer with this tech stack?

- [ ] find out if reloading pipeline code is possible
  ie, use lifecycle methods from

- [ ] understand stage & access masks better
  - [ ] review usage in ImageMemoryBarrier & in SubpassDependency
  re: creating framebuffers using the same depth image:
  "The color attachment differs for every swap chain image, but the same depth image can be used by all of them because only a single subpass is running at the same time due to our semaphores."
  so we'd need to do a depth image per swapchain image if there were multiple subpasses using them?
  how does SDL3_gpu handle that?
- [ ] review how barriers are used in the mipmap chapter

- [ ] try out using draw indirect & gpu culling

- [ ] generate build-time mipmaps
  - [ ] generate & use separate half-sized files with image-rs
  - [ ] combine & use into one packed sheet
